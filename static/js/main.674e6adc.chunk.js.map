{"version":3,"sources":["actions/index.js","Components/Card.js","Components/form.js","App.js","reducers/CardReducers.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["cardExpiry","val","month","max","length","Number","limit","substring","year","Card","_this$props","this","props","NUMBERCARD","NAMECARD","DATECARD","react_default","a","createElement","className","style","textAlign","margin","marginRight","marginTop","marginBottom","textTransform","Component","connect","state","card","form","handleBtnActionIncrement","_this","ONCHNG_NUMBER","handleBtnActionName","ONCHNG_NAME","handleBtnActionDate","ONCHNG_DATE","Components_Card","number_format_default","format","id","name","onChange","placeholder","type","dispatch","document","getElementById","value","App","Components_form","initialState","CardReducers","arguments","undefined","action","Object","objectSpread","combineReducers","CardReducer","store","createStore","rootReducer","applyMiddleware","logger","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.674e6adc.chunk.js","sourcesContent":["function limit(val, max) {\r\n    if (val.length === 1 && val[0] > max[0]) {\r\n      val = '0' + val;\r\n    }\r\n  \r\n    if (val.length === 2) {\r\n      if (Number(val) === 0) {\r\n        val = '01';\r\n  \r\n      //this can happen when user paste number\r\n    } else if (val > max) {\r\n        val = max;\r\n      }\r\n    }\r\n  \r\n    return val;\r\n  }\r\n  \r\n  function cardExpiry(val) {\r\n    let month = limit(val.substring(0, 2), '12');\r\n    \r\n    let year = val.substring(2, 5);\r\n\r\n \r\n    return month + (year.length ? '' + year : '')\r\n    ;\r\n  }\r\n  \r\n \r\n\r\nexport const CHNG_NUMBER = () => {\r\n    const num = document.getElementById(\"NUMBERCARD\").value;\r\n    //console.log(num);\r\n    return {\r\n    type: 'CHNG_NUMBER',\r\n    NUMBERCARD: num\r\n    }\r\n  }\r\n  \r\n  export const CHNG_NAME = count => {\r\n    const num =document.getElementById(\"NAMERCARD\").value;\r\n    return {\r\n      type: 'CHNG_NAME',\r\n      NAMECARD: num\r\n    }\r\n  }\r\n\r\n  export const CHNG_DATE = () => {\r\n    const num =cardExpiry (document.getElementById(\"DATECARD\").value);\r\n    return {\r\n      type: 'CHNG_DATE',\r\n      DATECARD: num\r\n    }\r\n  }","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport {connect} from 'react-redux';\r\nclass Card extends Component{\r\n    \r\n\r\nrender() {\r\n  const {NUMBERCARD,NAMECARD,DATECARD}=this.props;\r\n \r\n \r\n\r\n  return(\r\n    <div  className=\"divimg\">\r\n       \r\n      \r\n       <h3 style={{ textAlign: \"right\", margin:\"20px\"}}>Company Name</h3>\r\n       \r\n      \r\n        <p style={{ textAlign: \"center\", marginRight:\"20px\",marginTop:\"75px\"}}> {NUMBERCARD} </p>\r\n        \r\n           \r\n        <p style={{ textAlign: \"right\", marginRight:\"30px\"}}> {DATECARD} </p>\r\n\r\n        <p style={{ marginBottom: \"0px\", textAlign: \"left\",textTransform: \"uppercase\"  }}> {NAMECARD} </p>\r\n       \r\n       \r\n  \r\n\r\n\r\n         </div>\r\n    \r\n    \r\n   /* { <div>\r\n        {this.props.NUM}\r\n      <input type=\"text\" id=\"NUMBERCARD\"onChange={this.handleBtnActionIncrement} ></input>\r\n    </div> }*/\r\n  )\r\n}\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        NUMBERCARD: state.card.NUMBERCARD,\r\n        NAMECARD: state.card.NAMECARD,\r\n        DATECARD: state.card.DATECARD,\r\n      //nom:state.counter.nom\r\n    }\r\n  }\r\n\r\n\r\nexport default connect(mapStateToProps)(Card);","import React, {Component} from 'react';\r\nimport NumberFormat from 'react-number-format';\r\nimport '../App.css';\r\nimport {CHNG_NUMBER,CHNG_NAME,CHNG_DATE} from '../actions/index';\r\nimport {connect} from 'react-redux';\r\nimport Card from './Card';\r\nclass form extends Component{\r\n\r\n\r\n    \r\n    handleBtnActionIncrement = () => {\r\n        this.props.ONCHNG_NUMBER();\r\n       \r\n      }\r\n      handleBtnActionName = () => {\r\n        this.props.ONCHNG_NAME();\r\n       \r\n      }\r\n      handleBtnActionDate = () => {\r\n        this.props.ONCHNG_DATE();\r\n       \r\n      }\r\n      \r\n\r\nrender() {\r\n  //const {NUMBERCARD,NAMECARD,DATECARD}=this.props;\r\n \r\n \r\n\r\n  return(\r\n    <div>\r\n   \r\n    <div>\r\n    <h1>React Credit Cards</h1>\r\n    <Card></Card>\r\n    </div>\r\n\r\n\r\n     <div className=\"divimgdiv\">\r\n  \r\n     <NumberFormat format=\"#### #### #### ####\" id=\"NUMBERCARD\" name=\"NUMBERCARD\" onChange={this.handleBtnActionIncrement}  placeholder=\"XXXX XXXX XXXX XXXX\"/>\r\n   \r\n      <input type=\"text\" id=\"NAMERCARD\"onChange={this.handleBtnActionName} ></input>\r\n      <NumberFormat format=\"##/##\" id=\"DATECARD\"onChange={this.handleBtnActionDate}  placeholder=\"MM/YY\" />\r\n  \r\n    </div> \r\n    \r\n    </div>\r\n  )\r\n}\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        NUMBERCARD: state.card.NUMBERCARD,\r\n        NAMECARD: state.card.NAMECARD,\r\n        DATECARD: state.card.DATECARD,\r\n      //nom:state.counter.nom\r\n    }\r\n  }\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        ONCHNG_NUMBER: () => {  \r\n        dispatch(CHNG_NUMBER())\r\n      },\r\n      ONCHNG_NAME: () => {  \r\n        dispatch(CHNG_NAME())\r\n      },\r\n      ONCHNG_DATE: () => {  \r\n        dispatch(CHNG_DATE())\r\n      }\r\n\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(form);","import React from 'react';\nimport './App.css';\nimport Form from './Components/form';\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Form>\n\n    </Form>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\r\n    NUMBERCARD: \"**** **** **** ****\",\r\n    NAMECARD:\"FOULEN\",\r\n    DATECARD:\"1508\"\r\n}\r\n\r\n\r\n\r\nfunction CardReducers (state = initialState, action){\r\n    switch(action.type){\r\n        case \"CHNG_NUMBER\": {\r\n            return {...state, ...action}\r\n        }\r\n        case \"CHNG_NAME\": {\r\n            return {...state, ...action}\r\n        }\r\n        case \"CHNG_DATE\": {\r\n            return {...state, ...action}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} \r\n\r\nexport default CardReducers;\r\n","import {combineReducers} from 'redux';\r\nimport CardReducer from '../reducers/CardReducers';\r\n\r\nexport default combineReducers({\r\n    card: CardReducer,\r\n})","import {applyMiddleware, createStore} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(\r\n    logger\r\n))\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}